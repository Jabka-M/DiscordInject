(async()=>{const e=require("asar"),o=require("fs"),s=require("path"),r=require("fs-extra"),i=require("util"),c=i.promisify(o.readFile),t=i.promisify(o.writeFile),n=`${process.env.LOCALAPPDATA}\\Discord\\`,{spawn:a}=require("child_process"),l="./tmp/app/mainScreen.js";let d;await o.access(n,o.constants.F_OK,e=>{e&&(console.error(`Discord does not exists in ${n}`),process.exit(1))});let p=o.readdirSync(`${process.env.LOCALAPPDATA}\\Discord\\`).filter(e=>/app\-[\w\.]+/gi.exec(e));p.length||(console.error(`App folder does not exists in ${process.env.LOCALAPPDATA}\\Discord\\`),process.exit(1)),p=s.resolve(n,p[0]),await o.access(p,o.constants.F_OK,e=>{e&&(console.error(`${p} does not exists`),process.exit(1))});let w=s.resolve(p,"modules");d=s.resolve(p,"Discord.exe"),await o.access(w,o.constants.F_OK,e=>{e&&(console.error(`${w} does not exists`),process.exit(1))});let g=o.readdirSync(w).filter(e=>/discord_desktop_core\-\d/gi.exec(e));g.length||(console.error(`Desktop core folder does not exists in ${w}`),process.exit(1)),g=s.resolve(w,g[0],"discord_desktop_core"),await o.access(g,o.constants.F_OK,e=>{e&&(console.error(`${g} does not exists`),process.exit(1))});let m=s.resolve(g,"core.asar");await o.access(m,o.constants.F_OK,e=>{e&&(console.error(`${m} does not exists`),process.exit(1))}),console.log("Unpacking discord core..."),await r.remove("./tmp"),await i.promisify(o.copyFile)(m,"./core.asar"),await o.access("./core.asar.backup",o.constants.F_OK,async()=>{await i.promisify(o.copyFile)(m,"./core.asar.backup")}),e.extractAll("./core.asar","./tmp"),await i.promisify(o.copyFile)(l,`${l}.backup`);let u=await c("./code.js");u=`mainWindow.webContents.on('dom-ready', () => {setTimeout(() => {mainWindow.webContents.executeJavaScript(\`${u}\`);}, 3000);});\nmainWindow.webContents.`,console.log("Checking...");let x=await c(l,"utf-8");x.includes("mainWindow.webContents.on('dom-ready', () => {")&&(console.error("Already Injected"),process.exit(1));let f=x.replace("mainWindow.webContents.",u);console.log("Injecting..."),await t(l,f),console.log("Building new core..."),e.createPackage("./tmp","./core.asar",e=>{e&&(console.error("Failed building core"),process.exit(1))}),require("find-process")("name","Discord",!0).then(e=>{if(e.length){console.log("Killing discord...");for(let o of e)process.kill(o.pid)}}),setTimeout(async()=>{console.log("Removing original core..."),await r.remove(m),console.log("Setting up new core..."),await i.promisify(o.copyFile)("./core.asar",m),console.log("Cleaning up..."),await r.remove("./core.asar"),await r.remove("./tmp"),console.log("Starting Discord"),await a(d,[],{detached:!0,stdio:["ignore","ignore","ignore"]}).unref(),console.log("Success")},5e3)})();